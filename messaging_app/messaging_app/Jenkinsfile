pipeline {
    agent {
        docker {
            image 'python:3.10'
            args '-u root'
        }
    }

    environment {
        GITHUB_CREDENTIALS = credentials('github-credentials-id')
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials-id')
        VENV_DIR = 'venv'
        IMAGE_NAME = 'oolajide91/messaging_app'
        IMAGE_TAG = 'latest'
        KEEP_IMAGES = 3
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning up previous workspace...'
                sh '''
#!/bin/bash -e
rm -rf ${VENV_DIR}
rm -rf reports
# Keep last ${KEEP_IMAGES} Docker images, delete older ones
IMAGE_IDS=$(docker images --format '{{.Repository}} {{.Tag}} {{.ID}}' | grep ${IMAGE_NAME} | sort -r | awk 'NR>${KEEP_IMAGES} {print $3}')
if [ ! -z "$IMAGE_IDS" ]; then
    echo "Removing old Docker images..."
    docker rmi -f $IMAGE_IDS || true
fi
                '''
            }
        }

        stage('Checkout Code') {
            steps {
                echo 'Cloning repository from GitHub...'
                git branch: 'main',
                    url: 'https://github.com/OlajideTechie/alx-backend-python.git',
                    credentialsId: "github-credentials-id"
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                sh '''
#!/bin/bash -e
python -m venv ${VENV_DIR}
source ${VENV_DIR}/bin/activate
${VENV_DIR}/pip3 install --upgrade pip
${VENV_DIR}/pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running pytest tests...'
                sh '''
#!/bin/bash -e
source ${VENV_DIR}/bin/activate
${VENV_DIR}/pytest messaging_app/messaging_app/tests --junitxml=reports/test-results.xml
                '''
            }
            post {
                always {
                    junit 'reports/test-results.xml'
                }
            }
        }

        stage('Generate HTML Report') {
            steps {
                echo 'Generating pytest HTML report...'
                sh '''
#!/bin/bash -e
source ${VENV_DIR}/bin/activate
${VENV_DIR}/pytest messaging_app/messaging_app/tests --html=reports/report.html --self-contained-html
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                sh '''
#!/bin/bash -e
docker build --no-cache -t ${IMAGE_NAME}:${IMAGE_TAG} -f messaging_app/Dockerfile messaging_app
                '''
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withDockerRegistry([credentialsId: 'dockerhub-credentials-id', url: '']) {
                    sh '''
#!/bin/bash -e
docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            sh '''
#!/bin/bash -e
rm -rf ${VENV_DIR}
rm -rf reports
# Optionally remove current Docker image if needed
# docker rmi -f ${IMAGE_NAME}:${IMAGE_TAG} || true
            '''
            archiveArtifacts artifacts: 'reports/**/*.xml, reports/**/*.html', fingerprint: true
        }

        success {
            echo 'Build, test, and Docker push completed successfully!'
        }

        failure {
            echo 'Build or push failed. Check console output for details.'
        }
    }
}