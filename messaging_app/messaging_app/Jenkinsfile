pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('github-credentials-id')
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials-id')  // Jenkins Docker Hub credentials ID
        VENV_DIR = 'venv'
        IMAGE_NAME = 'oolajide91/messaging_app'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Cloning repository from GitHub...'
                git branch: 'main',
                    url: 'https://github.com/OlajideTechie/alx-backend-python.git',
                    credentialsId: "github-credentials-id"
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                sh '''
                    python3 -m venv ${VENV_DIR}
                    source ${VENV_DIR}/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running pytest tests...'
                sh '''
                    source ${VENV_DIR}/bin/activate
                    ${VENV_DIR}/bin/pytest messaging_app/tests --junitxml=reports/test-results.xml
                '''
            }
            post {
                always {
                    junit 'reports/test-results.xml'
                }
            }
        }

        stage('Generate HTML Report') {
            steps {
                echo 'Generating pytest HTML report...'
                sh '''
                    source ${VENV_DIR}/bin/activate
                    ${VENV_DIR}/bin/pytest messaging_app/tests --html=reports/report.html --self-contained-html
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                sh '''
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                '''
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withDockerRegistry([credentialsId: 'dockerhub-credentials-id', url: '']) {
                    sh '''
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Build, test, and Docker push completed successfully!'
        }
        failure {
            echo 'Build or push failed. Check console output for details.'
        }
        always {
            archiveArtifacts artifacts: 'reports/**/*.xml, reports/**/*.html', fingerprint: true
        }
    }
}