name: Django CI + Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-docker:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      IMAGE_NAME: oolajide91/messaging_app
      IMAGE_TAG: latest
      BUILD_TAG: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-v2
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install pytest pytest-django pytest-html pytest-cov flake8

      #- name: Run flake8 linting
       # run: |
        #  flake8 messaging_app
          
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            mysqladmin ping -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} && break
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run Django migrations
        run: |
          python messaging_app/manage.py migrate --noinput

      - name: Run tests with pytest, coverage, and HTML report
        run: |
          pytest messaging_app/messaging_app/tests \
            --junitxml=reports/test-results.xml \
            --cov=messaging_app --cov-report=xml:reports/coverage.xml \
            --html=reports/report.html --self-contained-html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: reports/coverage.xml

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build --no-cache -t ${{ env.IMAGE_NAME }}:latest -t ${{ env.IMAGE_NAME }}:${{ env.BUILD_TAG }} -f messaging_app/Dockerfile messaging_app

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.BUILD_TAG }}

      - name: Cleanup Docker
        if: always()
        run: |
          echo "Removing all Docker containers and images to free space..."
          docker container prune -f
          docker image prune -af

      # Optional: Deploy to Render via deploy hook
      # - name: Trigger Render Deploy
      #   run: |
      #     curl -X POST -H 'Content-Type: application/json' https://api.render.com/deploy/srv-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --data '{}'
      #   env:
      #     RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}